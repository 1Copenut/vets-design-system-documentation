/*
Flexbox

Use the [flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) utility classes to control various flexbox properties. These are especially useful when combined with [flexbox grid]({{root}}/layout/grid#layout.grid.alignment) classes.

#### Usage

For these utility classes to work, first create a flex container &mdash; you can use the [`vads-u-display--flex`]({{root}}/utilities/display-visibility) utility class &mdash; then apply these  utility classes to the container's direct children elements.

Style guide: utilities.flexbox
*/

/*
Justify content

Use the `justify-content` utility class on a flexbox container to change the alignment of its child elements on the main axis (x-axis by default).

> The CSS `justify-content` property defines how the browser distributes space between and around content items along the main axis of their container. &mdash; [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)

The classes follow the format: `vads-u-justify-content--{value}` and `vads-u-{breakpoint}-justify-content--{value}` where `breakpoint` is one of the [breakpoint prefixes]({{root}}/guidelines/responsive), and `value` is one of:

- `start` (browser default)
- `end`
- `center`
- `between`
- `around`

Markup:
<section>
<% ['start','end','center','between','around'].forEach(value => { %>
  <code class="preview__label">vads-u-justify-content--<%= value %></code>
  <article class="vads-u-justify-content--<%= value %> vads-u-display--flex vads-u-fill--primary-darkest">
    <div class="vads-u-fill--white vads-u-margin--1"><%= value %></div>
    <div class="vads-u-fill--white vads-u-margin--1"><%= value %></div>
    <div class="vads-u-fill--white vads-u-margin--1"><%= value %></div>
  </article>
<% }) %>
</section>

Style guide: utilities.flexbox.justify-content
*/

.vads-u-display--flex {
  display: flex !important;
}


$_justify-content-values: (
  flex-start: flex-start,
  flex-end: flex-end,
  center: center,
  space-between: space-between,
  space-around: space-around
);

@each $name in map-keys($_justify-content-values) {
  $value: map-get($_justify-content-values, $name);
  // Example: .vads-u-justify-content--start
  .vads-u-justify-content--#{$name} {
    // Example: justify-content: flex-start
    justify-content: $value !important;
  }
}

@each $breakpoint in map-keys($breakpoints) {
  $viewport: map-get($breakpoints, $breakpoint);

  @media (min-width: $viewport) {
    @each $name in map-keys($_justify-content-values) {
      $value: map-get($_justify-content-values, $name);
      // Example: .vads-u-lg-justify-content--start
      .vads-u-#{$breakpoint}-justify-content--#{$name} {
        // Example: justify-content: flex-start
        justify-content: $value !important;
      }
    }
  }
}

/*
Align items

Use the `align-items` utility class on a flexbox container to change the alignment of its child elements on the cross axis (y-axis by default).

> The CSS `align-items` property defines how the browser distributes space between and around flex items along the cross-axis of their container. This means it works like `justify-content` but in the perpendicular direction. &mdash; [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)

The classes follow the format: `vads-u-align-items--{value}` and `vads-u-{breakpoint}-align-items--{value}` where `breakpoint` is one of the [breakpoint prefixes]({{root}}/guidelines/responsive), and `value` is one of:

- `start`
- `end`
- `center`
- `baseline`
- `stretch` (browser default)

Markup:
<section>
<% ['start','end','center','baseline','stretch'].forEach(value => { %>
  <code class="preview__label">vads-u-align-items--<%= value %></code>
  <article class="vads-u-align-items--<%= value %> vads-u-display--flex vads-u-fill--primary-darkest" style="height: 75px">
    <div class="vads-u-fill--white vads-u-margin--1"><%= value %></div>
    <div class="vads-u-fill--white vads-u-margin--1"><%= value %></div>
    <div class="vads-u-fill--white vads-u-margin--1"><%= value %></div>
  </article>
<% }) %>
</section>

Style guide: utilities.flexbox.align-items
*/
$_align-items-values: (
  flex-start: flex-start,
  flex-end: flex-end,
  center: center,
  baseline: baseline,
  stretch: stretch
);

@each $name in map-keys($_align-items-values) {
  $value: map-get($_align-items-values, $name);
  // Example: .vads-u-align-items--start
  .vads-u-align-items--#{$name} {
    // Example: align-items: flex-start
    align-items: $value !important;
  }
}

@each $breakpoint in map-keys($breakpoints) {
  $viewport: map-get($breakpoints, $breakpoint);

  @media (min-width: $viewport) {
    @each $name in map-keys($_align-items-values) {
      $value: map-get($_align-items-values, $name);
      // Example: .vads-u-lg-align-items--start
      .vads-u-#{$breakpoint}-align-items--#{$name} {
        // Example: align-items: flex-start
        align-items: $value !important;
      }
    }
  }
}

@each $name in map-keys($_align-items-values) {
  $value: map-get($_align-items-values, $name);
  // Example: .vads-u-align-items--start
  .vads-u-align-self--#{$name} {
    // Example: align-items: flex-start
    align-self: $value !important;
  }
}

@each $breakpoint in map-keys($breakpoints) {
  $viewport: map-get($breakpoints, $breakpoint);

  @media (min-width: $viewport) {
    @each $name in map-keys($_align-items-values) {
      $value: map-get($_align-items-values, $name);
      // Example: .vads-u-lg-align-items--start
      .vads-u-#{$breakpoint}-align-self--#{$name} {
        // Example: align-items: flex-start
        align-self: $value !important;
      }
    }
  }
}

/*
Flex-wrap

Use the `flex-wrap` utility class on a flexbox container to change how its child elements wrap.

> The CSS `flex-wrap` property specifies whether flex items are forced into a single line or can be wrapped onto multiple lines. If wrapping is allowed, this property also enables you to control the direction in which lines are stacked. &mdash; [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap)

The classes follow the format: `vads-u-flex-wrap--{value}` and `vads-u-{breakpoint}-flex-wrap--{value}` where `breakpoint` is one of the [breakpoint prefixes]({{root}}/guidelines/responsive), and `value` is one of:

- `nowrap` (browser default)
- `wrap`
- `reverse`

Markup:
<section>
<% ['nowrap','wrap','reverse'].forEach(value => { %>
  <code class="preview__label">vads-u-flex-wrap--<%= value %></code>
  <article class="vads-u-flex-wrap--<%= value %> vads-u-display--flex vads-u-fill--primary-darkest">
    <div class="vads-u-fill--white vads-u-margin--1 vads-u-padding-y--2 vads-u-text-align--center" style="width: 50%"><%= value %> element #1</div>
    <div class="vads-u-fill--white vads-u-margin--1 vads-u-padding-y--2 vads-u-text-align--center" style="width: 50%"><%= value %> element #2</div>
    <div class="vads-u-fill--white vads-u-margin--1 vads-u-padding-y--2 vads-u-text-align--center" style="width: 50%"><%= value %> element #3</div>
  </article>
<% }) %>
</section>

Style guide: utilities.flexbox.flex-wrap
*/
$_flex-wrap-values: (nowrap: nowrap, wrap: wrap, wrap-reverse: wrap-reverse);

@each $name in map-keys($_flex-wrap-values) {
  $value: map-get($_flex-wrap-values, $name);
  // Example: .vads-u-flex-wrap--start
  .vads-u-flex-wrap--#{$name} {
    // Example: flex-wrap: flex-start
    flex-wrap: $value !important;
  }
}

@each $breakpoint in map-keys($breakpoints) {
  $viewport: map-get($breakpoints, $breakpoint);

  @media (min-width: $viewport) {
    @each $name in map-keys($_flex-wrap-values) {
      $value: map-get($_flex-wrap-values, $name);
      // Example: .vads-u-lg-flex-wrap--start
      .vads-u-#{$breakpoint}-flex-wrap--#{$name} {
        // Example: flex-wrap: flex-start
        flex-wrap: $value !important;
      }
    }
  }
}

/*
Flex-direction

> The flex-direction CSS property specifies how flex items are placed in the flex container defining the main axis and the direction (normal or reversed). [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction)

The classes follow the format: `vads-u-flex-direction--{value}` and `vads-u-{breakpoint}-flex-direction--{value}` where `breakpoint` is one of the [breakpoint prefixes]({{root}}/guidelines/responsive), and `value` is one of:

- `row` (browser default)
- `row-reverse`
- `column`
- `column-reverse`

*/
$_flex-direction-values: (column: column, row: row, column-reverse: column-reverse, row-reverse: row-reverse);

@each $name in map-keys($_flex-direction-values) {
  $value: map-get($_flex-direction-values, $name);
  // Example: .vads-u-flex-wrap--start
  .vads-u-flex-direction--#{$name} {
    // Example: flex-wrap: flex-start
    flex-direction: $value !important;

    > [class*=vads-l-col] {
      flex-basis: auto !important;
    }
  }
}

@each $breakpoint in map-keys($breakpoints) {
  $viewport: map-get($breakpoints, $breakpoint);

  @media (min-width: $viewport) {
    @each $name in map-keys($_flex-direction-values) {
      $value: map-get($_flex-direction-values, $name);
      // Example: .vads-u-lg-flex-wrap--start
      .vads-u-#{$breakpoint}-flex-direction--#{$name} {
        // Example: flex-wrap: flex-start
        flex-direction: $value !important;

        > [class*=vads-l-col] {
          flex-basis: auto !important;
        }
      }
    }
  }
}
